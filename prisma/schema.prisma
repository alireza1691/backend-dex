generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Admin
  User
}

model Avatars {
  id        String @id @default(uuid()) @map("_id")
  public_id String
  url       String
  user      User   @relation(fields: [userId], references: [id])
  userId    String @unique
}

model User {
  id           String   @id @default(uuid()) @map("_id")
  name         String
  email        String   @unique
  phone_number Float    @unique
  address      String?
  password     String
  avatar       Avatars?
  role         Role     @default(User)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model NonVerifiedUser {
  name         String
  lastName     String
  password     String
  phone_number Float    @unique
  email        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model InteractedUser {
  id           Int      @id @default(autoincrement())
  phone_number String   @unique
  createdAt    DateTime @default(now())
}

model Account {
  id           String         @id @default(uuid()) @map("_id")
  name         String
  lastName     String
  password     String
  phone_number String         @unique
  email        String?        @unique
  orders       Order[]
  verification Verification?
  wallet       AccountWallet?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Verification {
  id           String        @id @default(uuid()) @map("_id")
  personalId   String        @unique
  bankAccount  BankAccount[]
  user         Account       @relation(fields: [phone_number], references: [phone_number])
  phone_number String        @unique
  userLevel    Int
  address      String?
}

model AccountWallet {
  id                    Int     @id @default(autoincrement())
  tomanBalance          Int
  phone_number          String  @unique
  totalWithdrawalAmount Int
  totalDepositAmount    Int
  user                  Account @relation(fields: [phone_number], references: [phone_number])
}

model Order {
  id           Int      @id @default(autoincrement())
  fromAsset    String
  toAsset      String
  fromAmount   Int
  toAmount     Int
  orderedAt    DateTime @default(now())
  status       String
  phone_number String   @unique
  user         Account  @relation(fields: [phone_number], references: [phone_number])
}

model PendingVerification {
  id                     Int     @id @default(autoincrement())
  personalId             String  @unique
  personalCardImageUrl   String  @unique
  userImageUrl           String?
  userVerifyTextImageUrl String?
  phone_number           String  @unique
  isReadyToCheck         Boolean
}

model BankAccount {
  id           Int           @id @default(autoincrement())
  phone_number String        @unique
  shabaNumber  String        @unique
  cardNumber   String        @unique
  verification Verification? @relation(fields: [phone_number], references: [phone_number])
}

model PendingNewBankAccountRequest {
  id           Int    @id @default(autoincrement())
  phone_number String @unique
  cardNumber   String @unique
  shabaNumber  String @unique
}
